# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pypfe', [dirname(__file__)])
        except ImportError:
            import _pypfe
            return _pypfe
        if fp is not None:
            try:
                _mod = imp.load_module('_pypfe', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pypfe = swig_import_helper()
    del swig_import_helper
else:
    import _pypfe
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pypfe.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pypfe.SwigPyIterator_value(self)
    def incr(self, n=1): return _pypfe.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pypfe.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pypfe.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pypfe.SwigPyIterator_equal(self, *args)
    def copy(self): return _pypfe.SwigPyIterator_copy(self)
    def next(self): return _pypfe.SwigPyIterator_next(self)
    def __next__(self): return _pypfe.SwigPyIterator___next__(self)
    def previous(self): return _pypfe.SwigPyIterator_previous(self)
    def advance(self, *args): return _pypfe.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pypfe.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pypfe.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pypfe.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pypfe.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pypfe.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pypfe.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pypfe.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StrMapOc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMapOc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMapOc, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StrMapOc_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StrMapOc___nonzero__(self)
    def __bool__(self): return _pypfe.StrMapOc___bool__(self)
    def __len__(self): return _pypfe.StrMapOc___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.StrMapOc___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.StrMapOc___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.StrMapOc_has_key(self, *args)
    def keys(self): return _pypfe.StrMapOc_keys(self)
    def values(self): return _pypfe.StrMapOc_values(self)
    def items(self): return _pypfe.StrMapOc_items(self)
    def __contains__(self, *args): return _pypfe.StrMapOc___contains__(self, *args)
    def key_iterator(self): return _pypfe.StrMapOc_key_iterator(self)
    def value_iterator(self): return _pypfe.StrMapOc_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.StrMapOc___setitem__(self, *args)
    def asdict(self): return _pypfe.StrMapOc_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_StrMapOc(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.StrMapOc_empty(self)
    def size(self): return _pypfe.StrMapOc_size(self)
    def clear(self): return _pypfe.StrMapOc_clear(self)
    def swap(self, *args): return _pypfe.StrMapOc_swap(self, *args)
    def get_allocator(self): return _pypfe.StrMapOc_get_allocator(self)
    def begin(self): return _pypfe.StrMapOc_begin(self)
    def end(self): return _pypfe.StrMapOc_end(self)
    def rbegin(self): return _pypfe.StrMapOc_rbegin(self)
    def rend(self): return _pypfe.StrMapOc_rend(self)
    def count(self, *args): return _pypfe.StrMapOc_count(self, *args)
    def erase(self, *args): return _pypfe.StrMapOc_erase(self, *args)
    def find(self, *args): return _pypfe.StrMapOc_find(self, *args)
    def lower_bound(self, *args): return _pypfe.StrMapOc_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.StrMapOc_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_StrMapOc
    __del__ = lambda self : None;
StrMapOc_swigregister = _pypfe.StrMapOc_swigregister
StrMapOc_swigregister(StrMapOc)

class StrMapBc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMapBc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMapBc, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StrMapBc_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StrMapBc___nonzero__(self)
    def __bool__(self): return _pypfe.StrMapBc___bool__(self)
    def __len__(self): return _pypfe.StrMapBc___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.StrMapBc___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.StrMapBc___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.StrMapBc_has_key(self, *args)
    def keys(self): return _pypfe.StrMapBc_keys(self)
    def values(self): return _pypfe.StrMapBc_values(self)
    def items(self): return _pypfe.StrMapBc_items(self)
    def __contains__(self, *args): return _pypfe.StrMapBc___contains__(self, *args)
    def key_iterator(self): return _pypfe.StrMapBc_key_iterator(self)
    def value_iterator(self): return _pypfe.StrMapBc_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.StrMapBc___setitem__(self, *args)
    def asdict(self): return _pypfe.StrMapBc_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_StrMapBc(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.StrMapBc_empty(self)
    def size(self): return _pypfe.StrMapBc_size(self)
    def clear(self): return _pypfe.StrMapBc_clear(self)
    def swap(self, *args): return _pypfe.StrMapBc_swap(self, *args)
    def get_allocator(self): return _pypfe.StrMapBc_get_allocator(self)
    def begin(self): return _pypfe.StrMapBc_begin(self)
    def end(self): return _pypfe.StrMapBc_end(self)
    def rbegin(self): return _pypfe.StrMapBc_rbegin(self)
    def rend(self): return _pypfe.StrMapBc_rend(self)
    def count(self, *args): return _pypfe.StrMapBc_count(self, *args)
    def erase(self, *args): return _pypfe.StrMapBc_erase(self, *args)
    def find(self, *args): return _pypfe.StrMapBc_find(self, *args)
    def lower_bound(self, *args): return _pypfe.StrMapBc_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.StrMapBc_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_StrMapBc
    __del__ = lambda self : None;
StrMapBc_swigregister = _pypfe.StrMapBc_swigregister
StrMapBc_swigregister(StrMapBc)

class StrMapMetric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMapMetric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMapMetric, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StrMapMetric_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StrMapMetric___nonzero__(self)
    def __bool__(self): return _pypfe.StrMapMetric___bool__(self)
    def __len__(self): return _pypfe.StrMapMetric___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.StrMapMetric___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.StrMapMetric___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.StrMapMetric_has_key(self, *args)
    def keys(self): return _pypfe.StrMapMetric_keys(self)
    def values(self): return _pypfe.StrMapMetric_values(self)
    def items(self): return _pypfe.StrMapMetric_items(self)
    def __contains__(self, *args): return _pypfe.StrMapMetric___contains__(self, *args)
    def key_iterator(self): return _pypfe.StrMapMetric_key_iterator(self)
    def value_iterator(self): return _pypfe.StrMapMetric_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.StrMapMetric___setitem__(self, *args)
    def asdict(self): return _pypfe.StrMapMetric_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_StrMapMetric(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.StrMapMetric_empty(self)
    def size(self): return _pypfe.StrMapMetric_size(self)
    def clear(self): return _pypfe.StrMapMetric_clear(self)
    def swap(self, *args): return _pypfe.StrMapMetric_swap(self, *args)
    def get_allocator(self): return _pypfe.StrMapMetric_get_allocator(self)
    def begin(self): return _pypfe.StrMapMetric_begin(self)
    def end(self): return _pypfe.StrMapMetric_end(self)
    def rbegin(self): return _pypfe.StrMapMetric_rbegin(self)
    def rend(self): return _pypfe.StrMapMetric_rend(self)
    def count(self, *args): return _pypfe.StrMapMetric_count(self, *args)
    def erase(self, *args): return _pypfe.StrMapMetric_erase(self, *args)
    def find(self, *args): return _pypfe.StrMapMetric_find(self, *args)
    def lower_bound(self, *args): return _pypfe.StrMapMetric_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.StrMapMetric_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_StrMapMetric
    __del__ = lambda self : None;
StrMapMetric_swigregister = _pypfe.StrMapMetric_swigregister
StrMapMetric_swigregister(StrMapMetric)

ERR_DOCSIZE_LESS_0 = _pypfe.ERR_DOCSIZE_LESS_0
ERR_INVALID_COVER_ELEMENT = _pypfe.ERR_INVALID_COVER_ELEMENT
ERR_MISMATCHING_DOC_SIZES = _pypfe.ERR_MISMATCHING_DOC_SIZES
ERR_DOC_NOT_FOUNT = _pypfe.ERR_DOC_NOT_FOUNT
ERR_SIZE_NOT_DEFINED = _pypfe.ERR_SIZE_NOT_DEFINED
ERR_DOC_WITH_NAME_EXIST = _pypfe.ERR_DOC_WITH_NAME_EXIST
ERR_COULD_NOT_READ_FILE = _pypfe.ERR_COULD_NOT_READ_FILE
ERR_COULD_NOT_WRITE_FILE = _pypfe.ERR_COULD_NOT_WRITE_FILE
ERR_TRESHOLD_INSANE = _pypfe.ERR_TRESHOLD_INSANE
ERR_DOCUMENT_NOT_FOUND = _pypfe.ERR_DOCUMENT_NOT_FOUND
PFE_VERSION_MAJOR = _pypfe.PFE_VERSION_MAJOR
PFE_VERSION_MINOR = _pypfe.PFE_VERSION_MINOR
class CoverMetrics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoverMetrics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoverMetrics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypfe.new_CoverMetrics(*args)
        try: self.this.append(this)
        except: self.this = this
    def tp(self, *args): return _pypfe.CoverMetrics_tp(self, *args)
    def fp(self, *args): return _pypfe.CoverMetrics_fp(self, *args)
    def tn(self, *args): return _pypfe.CoverMetrics_tn(self, *args)
    def fn(self, *args): return _pypfe.CoverMetrics_fn(self, *args)
    def precision(self): return _pypfe.CoverMetrics_precision(self)
    def recall(self): return _pypfe.CoverMetrics_recall(self)
    def f1score(self): return _pypfe.CoverMetrics_f1score(self)
    def accuracy(self): return _pypfe.CoverMetrics_accuracy(self)
    def fprate(self): return _pypfe.CoverMetrics_fprate(self)
    def specificity(self): return _pypfe.CoverMetrics_specificity(self)
    def fnrate(self): return _pypfe.CoverMetrics_fnrate(self)
    def matthews(self): return _pypfe.CoverMetrics_matthews(self)
    def support(self): return _pypfe.CoverMetrics_support(self)
    def all(self): return _pypfe.CoverMetrics_all(self)
    __swig_destroy__ = _pypfe.delete_CoverMetrics
    __del__ = lambda self : None;
CoverMetrics_swigregister = _pypfe.CoverMetrics_swigregister
CoverMetrics_swigregister(CoverMetrics)

class DocCover(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocCover, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocCover, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypfe.new_DocCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def docSize(self): return _pypfe.DocCover_docSize(self)
    __swig_destroy__ = _pypfe.delete_DocCover
    __del__ = lambda self : None;
DocCover_swigregister = _pypfe.DocCover_swigregister
DocCover_swigregister(DocCover)

class OrderedDocCover(DocCover):
    __swig_setmethods__ = {}
    for _s in [DocCover]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderedDocCover, name, value)
    __swig_getmethods__ = {}
    for _s in [DocCover]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderedDocCover, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypfe.new_OrderedDocCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def indices(self): return _pypfe.OrderedDocCover_indices(self)
    def metrics(self, *args): return _pypfe.OrderedDocCover_metrics(self, *args)
    def size(self): return _pypfe.OrderedDocCover_size(self)
    def __eq__(self, *args): return _pypfe.OrderedDocCover___eq__(self, *args)
    def __ne__(self, *args): return _pypfe.OrderedDocCover___ne__(self, *args)
    def __iand__(self, *args): return _pypfe.OrderedDocCover___iand__(self, *args)
    def __ior__(self, *args): return _pypfe.OrderedDocCover___ior__(self, *args)
    def __isub__(self, *args): return _pypfe.OrderedDocCover___isub__(self, *args)
    def __ixor__(self, *args): return _pypfe.OrderedDocCover___ixor__(self, *args)
    def __and__(self, *args): return _pypfe.OrderedDocCover___and__(self, *args)
    def __or__(self, *args): return _pypfe.OrderedDocCover___or__(self, *args)
    def __sub__(self, *args): return _pypfe.OrderedDocCover___sub__(self, *args)
    def __xor__(self, *args): return _pypfe.OrderedDocCover___xor__(self, *args)
    __swig_destroy__ = _pypfe.delete_OrderedDocCover
    __del__ = lambda self : None;
OrderedDocCover_swigregister = _pypfe.OrderedDocCover_swigregister
OrderedDocCover_swigregister(OrderedDocCover)

class BitsetDocCover(DocCover):
    __swig_setmethods__ = {}
    for _s in [DocCover]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitsetDocCover, name, value)
    __swig_getmethods__ = {}
    for _s in [DocCover]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BitsetDocCover, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypfe.new_BitsetDocCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def bits(self): return _pypfe.BitsetDocCover_bits(self)
    def metrics(self, *args): return _pypfe.BitsetDocCover_metrics(self, *args)
    def size(self): return _pypfe.BitsetDocCover_size(self)
    def __eq__(self, *args): return _pypfe.BitsetDocCover___eq__(self, *args)
    def __ne__(self, *args): return _pypfe.BitsetDocCover___ne__(self, *args)
    def __iand__(self, *args): return _pypfe.BitsetDocCover___iand__(self, *args)
    def __ior__(self, *args): return _pypfe.BitsetDocCover___ior__(self, *args)
    def __isub__(self, *args): return _pypfe.BitsetDocCover___isub__(self, *args)
    def __ixor__(self, *args): return _pypfe.BitsetDocCover___ixor__(self, *args)
    def __and__(self, *args): return _pypfe.BitsetDocCover___and__(self, *args)
    def __or__(self, *args): return _pypfe.BitsetDocCover___or__(self, *args)
    def __sub__(self, *args): return _pypfe.BitsetDocCover___sub__(self, *args)
    def __xor__(self, *args): return _pypfe.BitsetDocCover___xor__(self, *args)
    __swig_destroy__ = _pypfe.delete_BitsetDocCover
    __del__ = lambda self : None;
BitsetDocCover_swigregister = _pypfe.BitsetDocCover_swigregister
BitsetDocCover_swigregister(BitsetDocCover)


def asLvFromOc(*args):
  return _pypfe.asLvFromOc(*args)
asLvFromOc = _pypfe.asLvFromOc

def asLvFromBc(*args):
  return _pypfe.asLvFromBc(*args)
asLvFromBc = _pypfe.asLvFromBc

def asBvFromOc(*args):
  return _pypfe.asBvFromOc(*args)
asBvFromOc = _pypfe.asBvFromOc

def asBvFromBc(*args):
  return _pypfe.asBvFromBc(*args)
asBvFromBc = _pypfe.asBvFromBc

def asSizesFromOc(*args):
  return _pypfe.asSizesFromOc(*args)
asSizesFromOc = _pypfe.asSizesFromOc

def asSizesFromBc(*args):
  return _pypfe.asSizesFromBc(*args)
asSizesFromBc = _pypfe.asSizesFromBc

def asOc(*args):
  return _pypfe.asOc(*args)
asOc = _pypfe.asOc

def asBc(*args):
  return _pypfe.asBc(*args)
asBc = _pypfe.asBc

def asBitsetCover(*args):
  return _pypfe.asBitsetCover(*args)
asBitsetCover = _pypfe.asBitsetCover

def asOrderedCover(*args):
  return _pypfe.asOrderedCover(*args)
asOrderedCover = _pypfe.asOrderedCover

def cumulativeOrdering(*args):
  return _pypfe.cumulativeOrdering(*args)
cumulativeOrdering = _pypfe.cumulativeOrdering

def fullOrderedDocCoverFromDoc(*args):
  return _pypfe.fullOrderedDocCoverFromDoc(*args)
fullOrderedDocCoverFromDoc = _pypfe.fullOrderedDocCoverFromDoc

def fullOrderedCoverFromCorpus(*args):
  return _pypfe.fullOrderedCoverFromCorpus(*args)
fullOrderedCoverFromCorpus = _pypfe.fullOrderedCoverFromCorpus

def readDocFromStr(*args):
  return _pypfe.readDocFromStr(*args)
readDocFromStr = _pypfe.readDocFromStr

def readDocFromFile(*args):
  return _pypfe.readDocFromFile(*args)
readDocFromFile = _pypfe.readDocFromFile

def readCorpusFromStr(*args):
  return _pypfe.readCorpusFromStr(*args)
readCorpusFromStr = _pypfe.readCorpusFromStr

def readCorpusFromFile(*args):
  return _pypfe.readCorpusFromFile(*args)
readCorpusFromFile = _pypfe.readCorpusFromFile

def writeCorpusToFile(*args):
  return _pypfe.writeCorpusToFile(*args)
writeCorpusToFile = _pypfe.writeCorpusToFile

def corpusSample(*args):
  return _pypfe.corpusSample(*args)
corpusSample = _pypfe.corpusSample

def docBasicRuleCovers(*args):
  return _pypfe.docBasicRuleCovers(*args)
docBasicRuleCovers = _pypfe.docBasicRuleCovers

def basicRuleCovers(*args):
  return _pypfe.basicRuleCovers(*args)
basicRuleCovers = _pypfe.basicRuleCovers

def docFullConjunctions(*args):
  return _pypfe.docFullConjunctions(*args)
docFullConjunctions = _pypfe.docFullConjunctions

def fullConjunctions(*args):
  return _pypfe.fullConjunctions(*args)
fullConjunctions = _pypfe.fullConjunctions

def docRuleCount(*args):
  return _pypfe.docRuleCount(*args)
docRuleCount = _pypfe.docRuleCount

def corpusRuleCount(*args):
  return _pypfe.corpusRuleCount(*args)
corpusRuleCount = _pypfe.corpusRuleCount

def conjunctionPairs(*args):
  return _pypfe.conjunctionPairs(*args)
conjunctionPairs = _pypfe.conjunctionPairs

def uniqueConjunctions(*args):
  return _pypfe.uniqueConjunctions(*args)
uniqueConjunctions = _pypfe.uniqueConjunctions

def conjunctionCover(*args):
  return _pypfe.conjunctionCover(*args)
conjunctionCover = _pypfe.conjunctionCover

def reorderRecall(*args):
  return _pypfe.reorderRecall(*args)
reorderRecall = _pypfe.reorderRecall

def hrApriori(*args):
  return _pypfe.hrApriori(*args)
hrApriori = _pypfe.hrApriori

def hpApriori(*args):
  return _pypfe.hpApriori(*args)
hpApriori = _pypfe.hpApriori
class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.LongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.LongVector___nonzero__(self)
    def __bool__(self): return _pypfe.LongVector___bool__(self)
    def __len__(self): return _pypfe.LongVector___len__(self)
    def pop(self): return _pypfe.LongVector_pop(self)
    def __getslice__(self, *args): return _pypfe.LongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.LongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.LongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.LongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.LongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.LongVector___setitem__(self, *args)
    def append(self, *args): return _pypfe.LongVector_append(self, *args)
    def empty(self): return _pypfe.LongVector_empty(self)
    def size(self): return _pypfe.LongVector_size(self)
    def clear(self): return _pypfe.LongVector_clear(self)
    def swap(self, *args): return _pypfe.LongVector_swap(self, *args)
    def get_allocator(self): return _pypfe.LongVector_get_allocator(self)
    def begin(self): return _pypfe.LongVector_begin(self)
    def end(self): return _pypfe.LongVector_end(self)
    def rbegin(self): return _pypfe.LongVector_rbegin(self)
    def rend(self): return _pypfe.LongVector_rend(self)
    def pop_back(self): return _pypfe.LongVector_pop_back(self)
    def erase(self, *args): return _pypfe.LongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.LongVector_push_back(self, *args)
    def front(self): return _pypfe.LongVector_front(self)
    def back(self): return _pypfe.LongVector_back(self)
    def assign(self, *args): return _pypfe.LongVector_assign(self, *args)
    def resize(self, *args): return _pypfe.LongVector_resize(self, *args)
    def insert(self, *args): return _pypfe.LongVector_insert(self, *args)
    def reserve(self, *args): return _pypfe.LongVector_reserve(self, *args)
    def capacity(self): return _pypfe.LongVector_capacity(self)
    __swig_destroy__ = _pypfe.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _pypfe.LongVector_swigregister
LongVector_swigregister(LongVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StringVector___nonzero__(self)
    def __bool__(self): return _pypfe.StringVector___bool__(self)
    def __len__(self): return _pypfe.StringVector___len__(self)
    def pop(self): return _pypfe.StringVector_pop(self)
    def __getslice__(self, *args): return _pypfe.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.StringVector___setitem__(self, *args)
    def append(self, *args): return _pypfe.StringVector_append(self, *args)
    def empty(self): return _pypfe.StringVector_empty(self)
    def size(self): return _pypfe.StringVector_size(self)
    def clear(self): return _pypfe.StringVector_clear(self)
    def swap(self, *args): return _pypfe.StringVector_swap(self, *args)
    def get_allocator(self): return _pypfe.StringVector_get_allocator(self)
    def begin(self): return _pypfe.StringVector_begin(self)
    def end(self): return _pypfe.StringVector_end(self)
    def rbegin(self): return _pypfe.StringVector_rbegin(self)
    def rend(self): return _pypfe.StringVector_rend(self)
    def pop_back(self): return _pypfe.StringVector_pop_back(self)
    def erase(self, *args): return _pypfe.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.StringVector_push_back(self, *args)
    def front(self): return _pypfe.StringVector_front(self)
    def back(self): return _pypfe.StringVector_back(self)
    def assign(self, *args): return _pypfe.StringVector_assign(self, *args)
    def resize(self, *args): return _pypfe.StringVector_resize(self, *args)
    def insert(self, *args): return _pypfe.StringVector_insert(self, *args)
    def reserve(self, *args): return _pypfe.StringVector_reserve(self, *args)
    def capacity(self): return _pypfe.StringVector_capacity(self)
    __swig_destroy__ = _pypfe.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _pypfe.StringVector_swigregister
StringVector_swigregister(StringVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.BoolVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.BoolVector___nonzero__(self)
    def __bool__(self): return _pypfe.BoolVector___bool__(self)
    def __len__(self): return _pypfe.BoolVector___len__(self)
    def pop(self): return _pypfe.BoolVector_pop(self)
    def __getslice__(self, *args): return _pypfe.BoolVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.BoolVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.BoolVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.BoolVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.BoolVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.BoolVector___setitem__(self, *args)
    def append(self, *args): return _pypfe.BoolVector_append(self, *args)
    def empty(self): return _pypfe.BoolVector_empty(self)
    def size(self): return _pypfe.BoolVector_size(self)
    def clear(self): return _pypfe.BoolVector_clear(self)
    def swap(self, *args): return _pypfe.BoolVector_swap(self, *args)
    def get_allocator(self): return _pypfe.BoolVector_get_allocator(self)
    def begin(self): return _pypfe.BoolVector_begin(self)
    def end(self): return _pypfe.BoolVector_end(self)
    def rbegin(self): return _pypfe.BoolVector_rbegin(self)
    def rend(self): return _pypfe.BoolVector_rend(self)
    def pop_back(self): return _pypfe.BoolVector_pop_back(self)
    def erase(self, *args): return _pypfe.BoolVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_BoolVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.BoolVector_push_back(self, *args)
    def front(self): return _pypfe.BoolVector_front(self)
    def back(self): return _pypfe.BoolVector_back(self)
    def assign(self, *args): return _pypfe.BoolVector_assign(self, *args)
    def resize(self, *args): return _pypfe.BoolVector_resize(self, *args)
    def insert(self, *args): return _pypfe.BoolVector_insert(self, *args)
    def reserve(self, *args): return _pypfe.BoolVector_reserve(self, *args)
    def capacity(self): return _pypfe.BoolVector_capacity(self)
    __swig_destroy__ = _pypfe.delete_BoolVector
    __del__ = lambda self : None;
BoolVector_swigregister = _pypfe.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class StrMapL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMapL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMapL, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StrMapL_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StrMapL___nonzero__(self)
    def __bool__(self): return _pypfe.StrMapL___bool__(self)
    def __len__(self): return _pypfe.StrMapL___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.StrMapL___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.StrMapL___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.StrMapL_has_key(self, *args)
    def keys(self): return _pypfe.StrMapL_keys(self)
    def values(self): return _pypfe.StrMapL_values(self)
    def items(self): return _pypfe.StrMapL_items(self)
    def __contains__(self, *args): return _pypfe.StrMapL___contains__(self, *args)
    def key_iterator(self): return _pypfe.StrMapL_key_iterator(self)
    def value_iterator(self): return _pypfe.StrMapL_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.StrMapL___setitem__(self, *args)
    def asdict(self): return _pypfe.StrMapL_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_StrMapL(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.StrMapL_empty(self)
    def size(self): return _pypfe.StrMapL_size(self)
    def clear(self): return _pypfe.StrMapL_clear(self)
    def swap(self, *args): return _pypfe.StrMapL_swap(self, *args)
    def get_allocator(self): return _pypfe.StrMapL_get_allocator(self)
    def begin(self): return _pypfe.StrMapL_begin(self)
    def end(self): return _pypfe.StrMapL_end(self)
    def rbegin(self): return _pypfe.StrMapL_rbegin(self)
    def rend(self): return _pypfe.StrMapL_rend(self)
    def count(self, *args): return _pypfe.StrMapL_count(self, *args)
    def erase(self, *args): return _pypfe.StrMapL_erase(self, *args)
    def find(self, *args): return _pypfe.StrMapL_find(self, *args)
    def lower_bound(self, *args): return _pypfe.StrMapL_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.StrMapL_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_StrMapL
    __del__ = lambda self : None;
StrMapL_swigregister = _pypfe.StrMapL_swigregister
StrMapL_swigregister(StrMapL)

class StrMapD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMapD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMapD, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StrMapD_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StrMapD___nonzero__(self)
    def __bool__(self): return _pypfe.StrMapD___bool__(self)
    def __len__(self): return _pypfe.StrMapD___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.StrMapD___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.StrMapD___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.StrMapD_has_key(self, *args)
    def keys(self): return _pypfe.StrMapD_keys(self)
    def values(self): return _pypfe.StrMapD_values(self)
    def items(self): return _pypfe.StrMapD_items(self)
    def __contains__(self, *args): return _pypfe.StrMapD___contains__(self, *args)
    def key_iterator(self): return _pypfe.StrMapD_key_iterator(self)
    def value_iterator(self): return _pypfe.StrMapD_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.StrMapD___setitem__(self, *args)
    def asdict(self): return _pypfe.StrMapD_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_StrMapD(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.StrMapD_empty(self)
    def size(self): return _pypfe.StrMapD_size(self)
    def clear(self): return _pypfe.StrMapD_clear(self)
    def swap(self, *args): return _pypfe.StrMapD_swap(self, *args)
    def get_allocator(self): return _pypfe.StrMapD_get_allocator(self)
    def begin(self): return _pypfe.StrMapD_begin(self)
    def end(self): return _pypfe.StrMapD_end(self)
    def rbegin(self): return _pypfe.StrMapD_rbegin(self)
    def rend(self): return _pypfe.StrMapD_rend(self)
    def count(self, *args): return _pypfe.StrMapD_count(self, *args)
    def erase(self, *args): return _pypfe.StrMapD_erase(self, *args)
    def find(self, *args): return _pypfe.StrMapD_find(self, *args)
    def lower_bound(self, *args): return _pypfe.StrMapD_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.StrMapD_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_StrMapD
    __del__ = lambda self : None;
StrMapD_swigregister = _pypfe.StrMapD_swigregister
StrMapD_swigregister(StrMapD)

class StrMapLv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMapLv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMapLv, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StrMapLv_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StrMapLv___nonzero__(self)
    def __bool__(self): return _pypfe.StrMapLv___bool__(self)
    def __len__(self): return _pypfe.StrMapLv___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.StrMapLv___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.StrMapLv___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.StrMapLv_has_key(self, *args)
    def keys(self): return _pypfe.StrMapLv_keys(self)
    def values(self): return _pypfe.StrMapLv_values(self)
    def items(self): return _pypfe.StrMapLv_items(self)
    def __contains__(self, *args): return _pypfe.StrMapLv___contains__(self, *args)
    def key_iterator(self): return _pypfe.StrMapLv_key_iterator(self)
    def value_iterator(self): return _pypfe.StrMapLv_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.StrMapLv___setitem__(self, *args)
    def asdict(self): return _pypfe.StrMapLv_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_StrMapLv(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.StrMapLv_empty(self)
    def size(self): return _pypfe.StrMapLv_size(self)
    def clear(self): return _pypfe.StrMapLv_clear(self)
    def swap(self, *args): return _pypfe.StrMapLv_swap(self, *args)
    def get_allocator(self): return _pypfe.StrMapLv_get_allocator(self)
    def begin(self): return _pypfe.StrMapLv_begin(self)
    def end(self): return _pypfe.StrMapLv_end(self)
    def rbegin(self): return _pypfe.StrMapLv_rbegin(self)
    def rend(self): return _pypfe.StrMapLv_rend(self)
    def count(self, *args): return _pypfe.StrMapLv_count(self, *args)
    def erase(self, *args): return _pypfe.StrMapLv_erase(self, *args)
    def find(self, *args): return _pypfe.StrMapLv_find(self, *args)
    def lower_bound(self, *args): return _pypfe.StrMapLv_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.StrMapLv_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_StrMapLv
    __del__ = lambda self : None;
StrMapLv_swigregister = _pypfe.StrMapLv_swigregister
StrMapLv_swigregister(StrMapLv)

class StrMapBv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMapBv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMapBv, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.StrMapBv_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.StrMapBv___nonzero__(self)
    def __bool__(self): return _pypfe.StrMapBv___bool__(self)
    def __len__(self): return _pypfe.StrMapBv___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.StrMapBv___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.StrMapBv___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.StrMapBv_has_key(self, *args)
    def keys(self): return _pypfe.StrMapBv_keys(self)
    def values(self): return _pypfe.StrMapBv_values(self)
    def items(self): return _pypfe.StrMapBv_items(self)
    def __contains__(self, *args): return _pypfe.StrMapBv___contains__(self, *args)
    def key_iterator(self): return _pypfe.StrMapBv_key_iterator(self)
    def value_iterator(self): return _pypfe.StrMapBv_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.StrMapBv___setitem__(self, *args)
    def asdict(self): return _pypfe.StrMapBv_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_StrMapBv(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.StrMapBv_empty(self)
    def size(self): return _pypfe.StrMapBv_size(self)
    def clear(self): return _pypfe.StrMapBv_clear(self)
    def swap(self, *args): return _pypfe.StrMapBv_swap(self, *args)
    def get_allocator(self): return _pypfe.StrMapBv_get_allocator(self)
    def begin(self): return _pypfe.StrMapBv_begin(self)
    def end(self): return _pypfe.StrMapBv_end(self)
    def rbegin(self): return _pypfe.StrMapBv_rbegin(self)
    def rend(self): return _pypfe.StrMapBv_rend(self)
    def count(self, *args): return _pypfe.StrMapBv_count(self, *args)
    def erase(self, *args): return _pypfe.StrMapBv_erase(self, *args)
    def find(self, *args): return _pypfe.StrMapBv_find(self, *args)
    def lower_bound(self, *args): return _pypfe.StrMapBv_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.StrMapBv_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_StrMapBv
    __del__ = lambda self : None;
StrMapBv_swigregister = _pypfe.StrMapBv_swigregister
StrMapBv_swigregister(StrMapBv)

class Document(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.Document_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.Document___nonzero__(self)
    def __bool__(self): return _pypfe.Document___bool__(self)
    def __len__(self): return _pypfe.Document___len__(self)
    def pop(self): return _pypfe.Document_pop(self)
    def __getslice__(self, *args): return _pypfe.Document___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.Document___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.Document___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.Document___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.Document___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.Document___setitem__(self, *args)
    def append(self, *args): return _pypfe.Document_append(self, *args)
    def empty(self): return _pypfe.Document_empty(self)
    def size(self): return _pypfe.Document_size(self)
    def clear(self): return _pypfe.Document_clear(self)
    def swap(self, *args): return _pypfe.Document_swap(self, *args)
    def get_allocator(self): return _pypfe.Document_get_allocator(self)
    def begin(self): return _pypfe.Document_begin(self)
    def end(self): return _pypfe.Document_end(self)
    def rbegin(self): return _pypfe.Document_rbegin(self)
    def rend(self): return _pypfe.Document_rend(self)
    def pop_back(self): return _pypfe.Document_pop_back(self)
    def erase(self, *args): return _pypfe.Document_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_Document(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.Document_push_back(self, *args)
    def front(self): return _pypfe.Document_front(self)
    def back(self): return _pypfe.Document_back(self)
    def assign(self, *args): return _pypfe.Document_assign(self, *args)
    def resize(self, *args): return _pypfe.Document_resize(self, *args)
    def insert(self, *args): return _pypfe.Document_insert(self, *args)
    def reserve(self, *args): return _pypfe.Document_reserve(self, *args)
    def capacity(self): return _pypfe.Document_capacity(self)
    __swig_destroy__ = _pypfe.delete_Document
    __del__ = lambda self : None;
Document_swigregister = _pypfe.Document_swigregister
Document_swigregister(Document)

class Corpus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Corpus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Corpus, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.Corpus_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.Corpus___nonzero__(self)
    def __bool__(self): return _pypfe.Corpus___bool__(self)
    def __len__(self): return _pypfe.Corpus___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.Corpus___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.Corpus___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.Corpus_has_key(self, *args)
    def keys(self): return _pypfe.Corpus_keys(self)
    def values(self): return _pypfe.Corpus_values(self)
    def items(self): return _pypfe.Corpus_items(self)
    def __contains__(self, *args): return _pypfe.Corpus___contains__(self, *args)
    def key_iterator(self): return _pypfe.Corpus_key_iterator(self)
    def value_iterator(self): return _pypfe.Corpus_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.Corpus___setitem__(self, *args)
    def asdict(self): return _pypfe.Corpus_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_Corpus(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.Corpus_empty(self)
    def size(self): return _pypfe.Corpus_size(self)
    def clear(self): return _pypfe.Corpus_clear(self)
    def swap(self, *args): return _pypfe.Corpus_swap(self, *args)
    def get_allocator(self): return _pypfe.Corpus_get_allocator(self)
    def begin(self): return _pypfe.Corpus_begin(self)
    def end(self): return _pypfe.Corpus_end(self)
    def rbegin(self): return _pypfe.Corpus_rbegin(self)
    def rend(self): return _pypfe.Corpus_rend(self)
    def count(self, *args): return _pypfe.Corpus_count(self, *args)
    def erase(self, *args): return _pypfe.Corpus_erase(self, *args)
    def find(self, *args): return _pypfe.Corpus_find(self, *args)
    def lower_bound(self, *args): return _pypfe.Corpus_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.Corpus_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_Corpus
    __del__ = lambda self : None;
Corpus_swigregister = _pypfe.Corpus_swigregister
Corpus_swigregister(Corpus)

class Rule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypfe.new_Rule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _pypfe.Rule_first_set
    __swig_getmethods__["first"] = _pypfe.Rule_first_get
    if _newclass:first = _swig_property(_pypfe.Rule_first_get, _pypfe.Rule_first_set)
    __swig_setmethods__["second"] = _pypfe.Rule_second_set
    __swig_getmethods__["second"] = _pypfe.Rule_second_get
    if _newclass:second = _swig_property(_pypfe.Rule_second_get, _pypfe.Rule_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _pypfe.delete_Rule
    __del__ = lambda self : None;
Rule_swigregister = _pypfe.Rule_swigregister
Rule_swigregister(Rule)

class OrderedCover(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderedCover, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderedCover, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypfe.new_OrderedCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def map(self): return _pypfe.OrderedCover_map(self)
    def addDocCover(self, *args): return _pypfe.OrderedCover_addDocCover(self, *args)
    def names(self): return _pypfe.OrderedCover_names(self)
    def docCover(self, *args): return _pypfe.OrderedCover_docCover(self, *args)
    def size(self): return _pypfe.OrderedCover_size(self)
    def sample(self, *args): return _pypfe.OrderedCover_sample(self, *args)
    def metrics(self, *args): return _pypfe.OrderedCover_metrics(self, *args)
    def documentMetrics(self, *args): return _pypfe.OrderedCover_documentMetrics(self, *args)
    def __eq__(self, *args): return _pypfe.OrderedCover___eq__(self, *args)
    def __ne__(self, *args): return _pypfe.OrderedCover___ne__(self, *args)
    def __iand__(self, *args): return _pypfe.OrderedCover___iand__(self, *args)
    def __ior__(self, *args): return _pypfe.OrderedCover___ior__(self, *args)
    def __isub__(self, *args): return _pypfe.OrderedCover___isub__(self, *args)
    def __ixor__(self, *args): return _pypfe.OrderedCover___ixor__(self, *args)
    def __and__(self, *args): return _pypfe.OrderedCover___and__(self, *args)
    def __or__(self, *args): return _pypfe.OrderedCover___or__(self, *args)
    def __sub__(self, *args): return _pypfe.OrderedCover___sub__(self, *args)
    def __xor__(self, *args): return _pypfe.OrderedCover___xor__(self, *args)
    __swig_destroy__ = _pypfe.delete_OrderedCover
    __del__ = lambda self : None;
OrderedCover_swigregister = _pypfe.OrderedCover_swigregister
OrderedCover_swigregister(OrderedCover)

class BitsetCover(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitsetCover, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitsetCover, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pypfe.new_BitsetCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def map(self): return _pypfe.BitsetCover_map(self)
    def addDocCover(self, *args): return _pypfe.BitsetCover_addDocCover(self, *args)
    def names(self): return _pypfe.BitsetCover_names(self)
    def docCover(self, *args): return _pypfe.BitsetCover_docCover(self, *args)
    def size(self): return _pypfe.BitsetCover_size(self)
    def sample(self, *args): return _pypfe.BitsetCover_sample(self, *args)
    def metrics(self, *args): return _pypfe.BitsetCover_metrics(self, *args)
    def documentMetrics(self, *args): return _pypfe.BitsetCover_documentMetrics(self, *args)
    def __eq__(self, *args): return _pypfe.BitsetCover___eq__(self, *args)
    def __ne__(self, *args): return _pypfe.BitsetCover___ne__(self, *args)
    def __iand__(self, *args): return _pypfe.BitsetCover___iand__(self, *args)
    def __ior__(self, *args): return _pypfe.BitsetCover___ior__(self, *args)
    def __isub__(self, *args): return _pypfe.BitsetCover___isub__(self, *args)
    def __ixor__(self, *args): return _pypfe.BitsetCover___ixor__(self, *args)
    def __and__(self, *args): return _pypfe.BitsetCover___and__(self, *args)
    def __or__(self, *args): return _pypfe.BitsetCover___or__(self, *args)
    def __sub__(self, *args): return _pypfe.BitsetCover___sub__(self, *args)
    def __xor__(self, *args): return _pypfe.BitsetCover___xor__(self, *args)
    __swig_destroy__ = _pypfe.delete_BitsetCover
    __del__ = lambda self : None;
BitsetCover_swigregister = _pypfe.BitsetCover_swigregister
BitsetCover_swigregister(BitsetCover)

class Conjunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Conjunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Conjunction, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.Conjunction_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.Conjunction___nonzero__(self)
    def __bool__(self): return _pypfe.Conjunction___bool__(self)
    def __len__(self): return _pypfe.Conjunction___len__(self)
    def pop(self): return _pypfe.Conjunction_pop(self)
    def __getslice__(self, *args): return _pypfe.Conjunction___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.Conjunction___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.Conjunction___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.Conjunction___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.Conjunction___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.Conjunction___setitem__(self, *args)
    def append(self, *args): return _pypfe.Conjunction_append(self, *args)
    def empty(self): return _pypfe.Conjunction_empty(self)
    def size(self): return _pypfe.Conjunction_size(self)
    def clear(self): return _pypfe.Conjunction_clear(self)
    def swap(self, *args): return _pypfe.Conjunction_swap(self, *args)
    def get_allocator(self): return _pypfe.Conjunction_get_allocator(self)
    def begin(self): return _pypfe.Conjunction_begin(self)
    def end(self): return _pypfe.Conjunction_end(self)
    def rbegin(self): return _pypfe.Conjunction_rbegin(self)
    def rend(self): return _pypfe.Conjunction_rend(self)
    def pop_back(self): return _pypfe.Conjunction_pop_back(self)
    def erase(self, *args): return _pypfe.Conjunction_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_Conjunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.Conjunction_push_back(self, *args)
    def front(self): return _pypfe.Conjunction_front(self)
    def back(self): return _pypfe.Conjunction_back(self)
    def assign(self, *args): return _pypfe.Conjunction_assign(self, *args)
    def resize(self, *args): return _pypfe.Conjunction_resize(self, *args)
    def insert(self, *args): return _pypfe.Conjunction_insert(self, *args)
    def reserve(self, *args): return _pypfe.Conjunction_reserve(self, *args)
    def capacity(self): return _pypfe.Conjunction_capacity(self)
    __swig_destroy__ = _pypfe.delete_Conjunction
    __del__ = lambda self : None;
Conjunction_swigregister = _pypfe.Conjunction_swigregister
Conjunction_swigregister(Conjunction)

class ConjunctionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConjunctionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConjunctionVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.ConjunctionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.ConjunctionVector___nonzero__(self)
    def __bool__(self): return _pypfe.ConjunctionVector___bool__(self)
    def __len__(self): return _pypfe.ConjunctionVector___len__(self)
    def pop(self): return _pypfe.ConjunctionVector_pop(self)
    def __getslice__(self, *args): return _pypfe.ConjunctionVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.ConjunctionVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.ConjunctionVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.ConjunctionVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.ConjunctionVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.ConjunctionVector___setitem__(self, *args)
    def append(self, *args): return _pypfe.ConjunctionVector_append(self, *args)
    def empty(self): return _pypfe.ConjunctionVector_empty(self)
    def size(self): return _pypfe.ConjunctionVector_size(self)
    def clear(self): return _pypfe.ConjunctionVector_clear(self)
    def swap(self, *args): return _pypfe.ConjunctionVector_swap(self, *args)
    def get_allocator(self): return _pypfe.ConjunctionVector_get_allocator(self)
    def begin(self): return _pypfe.ConjunctionVector_begin(self)
    def end(self): return _pypfe.ConjunctionVector_end(self)
    def rbegin(self): return _pypfe.ConjunctionVector_rbegin(self)
    def rend(self): return _pypfe.ConjunctionVector_rend(self)
    def pop_back(self): return _pypfe.ConjunctionVector_pop_back(self)
    def erase(self, *args): return _pypfe.ConjunctionVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_ConjunctionVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.ConjunctionVector_push_back(self, *args)
    def front(self): return _pypfe.ConjunctionVector_front(self)
    def back(self): return _pypfe.ConjunctionVector_back(self)
    def assign(self, *args): return _pypfe.ConjunctionVector_assign(self, *args)
    def resize(self, *args): return _pypfe.ConjunctionVector_resize(self, *args)
    def insert(self, *args): return _pypfe.ConjunctionVector_insert(self, *args)
    def reserve(self, *args): return _pypfe.ConjunctionVector_reserve(self, *args)
    def capacity(self): return _pypfe.ConjunctionVector_capacity(self)
    __swig_destroy__ = _pypfe.delete_ConjunctionVector
    __del__ = lambda self : None;
ConjunctionVector_swigregister = _pypfe.ConjunctionVector_swigregister
ConjunctionVector_swigregister(ConjunctionVector)

class ConjunctionSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConjunctionSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConjunctionSet, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.ConjunctionSet_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.ConjunctionSet___nonzero__(self)
    def __bool__(self): return _pypfe.ConjunctionSet___bool__(self)
    def __len__(self): return _pypfe.ConjunctionSet___len__(self)
    def append(self, *args): return _pypfe.ConjunctionSet_append(self, *args)
    def __contains__(self, *args): return _pypfe.ConjunctionSet___contains__(self, *args)
    def __getitem__(self, *args): return _pypfe.ConjunctionSet___getitem__(self, *args)
    def add(self, *args): return _pypfe.ConjunctionSet_add(self, *args)
    def discard(self, *args): return _pypfe.ConjunctionSet_discard(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_ConjunctionSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.ConjunctionSet_empty(self)
    def size(self): return _pypfe.ConjunctionSet_size(self)
    def clear(self): return _pypfe.ConjunctionSet_clear(self)
    def swap(self, *args): return _pypfe.ConjunctionSet_swap(self, *args)
    def count(self, *args): return _pypfe.ConjunctionSet_count(self, *args)
    def begin(self): return _pypfe.ConjunctionSet_begin(self)
    def end(self): return _pypfe.ConjunctionSet_end(self)
    def rbegin(self): return _pypfe.ConjunctionSet_rbegin(self)
    def rend(self): return _pypfe.ConjunctionSet_rend(self)
    def erase(self, *args): return _pypfe.ConjunctionSet_erase(self, *args)
    def find(self, *args): return _pypfe.ConjunctionSet_find(self, *args)
    def lower_bound(self, *args): return _pypfe.ConjunctionSet_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.ConjunctionSet_upper_bound(self, *args)
    def equal_range(self, *args): return _pypfe.ConjunctionSet_equal_range(self, *args)
    def insert(self, *args): return _pypfe.ConjunctionSet_insert(self, *args)
    __swig_destroy__ = _pypfe.delete_ConjunctionSet
    __del__ = lambda self : None;
ConjunctionSet_swigregister = _pypfe.ConjunctionSet_swigregister
ConjunctionSet_swigregister(ConjunctionSet)

class RuleOrderedDocCover(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuleOrderedDocCover, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RuleOrderedDocCover, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.RuleOrderedDocCover_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.RuleOrderedDocCover___nonzero__(self)
    def __bool__(self): return _pypfe.RuleOrderedDocCover___bool__(self)
    def __len__(self): return _pypfe.RuleOrderedDocCover___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.RuleOrderedDocCover___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.RuleOrderedDocCover___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.RuleOrderedDocCover_has_key(self, *args)
    def keys(self): return _pypfe.RuleOrderedDocCover_keys(self)
    def values(self): return _pypfe.RuleOrderedDocCover_values(self)
    def items(self): return _pypfe.RuleOrderedDocCover_items(self)
    def __contains__(self, *args): return _pypfe.RuleOrderedDocCover___contains__(self, *args)
    def key_iterator(self): return _pypfe.RuleOrderedDocCover_key_iterator(self)
    def value_iterator(self): return _pypfe.RuleOrderedDocCover_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.RuleOrderedDocCover___setitem__(self, *args)
    def asdict(self): return _pypfe.RuleOrderedDocCover_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_RuleOrderedDocCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.RuleOrderedDocCover_empty(self)
    def size(self): return _pypfe.RuleOrderedDocCover_size(self)
    def clear(self): return _pypfe.RuleOrderedDocCover_clear(self)
    def swap(self, *args): return _pypfe.RuleOrderedDocCover_swap(self, *args)
    def get_allocator(self): return _pypfe.RuleOrderedDocCover_get_allocator(self)
    def begin(self): return _pypfe.RuleOrderedDocCover_begin(self)
    def end(self): return _pypfe.RuleOrderedDocCover_end(self)
    def rbegin(self): return _pypfe.RuleOrderedDocCover_rbegin(self)
    def rend(self): return _pypfe.RuleOrderedDocCover_rend(self)
    def count(self, *args): return _pypfe.RuleOrderedDocCover_count(self, *args)
    def erase(self, *args): return _pypfe.RuleOrderedDocCover_erase(self, *args)
    def find(self, *args): return _pypfe.RuleOrderedDocCover_find(self, *args)
    def lower_bound(self, *args): return _pypfe.RuleOrderedDocCover_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.RuleOrderedDocCover_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_RuleOrderedDocCover
    __del__ = lambda self : None;
RuleOrderedDocCover_swigregister = _pypfe.RuleOrderedDocCover_swigregister
RuleOrderedDocCover_swigregister(RuleOrderedDocCover)

class RuleBitsetDocCover(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuleBitsetDocCover, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RuleBitsetDocCover, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.RuleBitsetDocCover_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.RuleBitsetDocCover___nonzero__(self)
    def __bool__(self): return _pypfe.RuleBitsetDocCover___bool__(self)
    def __len__(self): return _pypfe.RuleBitsetDocCover___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.RuleBitsetDocCover___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.RuleBitsetDocCover___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.RuleBitsetDocCover_has_key(self, *args)
    def keys(self): return _pypfe.RuleBitsetDocCover_keys(self)
    def values(self): return _pypfe.RuleBitsetDocCover_values(self)
    def items(self): return _pypfe.RuleBitsetDocCover_items(self)
    def __contains__(self, *args): return _pypfe.RuleBitsetDocCover___contains__(self, *args)
    def key_iterator(self): return _pypfe.RuleBitsetDocCover_key_iterator(self)
    def value_iterator(self): return _pypfe.RuleBitsetDocCover_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.RuleBitsetDocCover___setitem__(self, *args)
    def asdict(self): return _pypfe.RuleBitsetDocCover_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_RuleBitsetDocCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.RuleBitsetDocCover_empty(self)
    def size(self): return _pypfe.RuleBitsetDocCover_size(self)
    def clear(self): return _pypfe.RuleBitsetDocCover_clear(self)
    def swap(self, *args): return _pypfe.RuleBitsetDocCover_swap(self, *args)
    def get_allocator(self): return _pypfe.RuleBitsetDocCover_get_allocator(self)
    def begin(self): return _pypfe.RuleBitsetDocCover_begin(self)
    def end(self): return _pypfe.RuleBitsetDocCover_end(self)
    def rbegin(self): return _pypfe.RuleBitsetDocCover_rbegin(self)
    def rend(self): return _pypfe.RuleBitsetDocCover_rend(self)
    def count(self, *args): return _pypfe.RuleBitsetDocCover_count(self, *args)
    def erase(self, *args): return _pypfe.RuleBitsetDocCover_erase(self, *args)
    def find(self, *args): return _pypfe.RuleBitsetDocCover_find(self, *args)
    def lower_bound(self, *args): return _pypfe.RuleBitsetDocCover_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.RuleBitsetDocCover_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_RuleBitsetDocCover
    __del__ = lambda self : None;
RuleBitsetDocCover_swigregister = _pypfe.RuleBitsetDocCover_swigregister
RuleBitsetDocCover_swigregister(RuleBitsetDocCover)

class RuleOrderedCover(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuleOrderedCover, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RuleOrderedCover, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.RuleOrderedCover_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.RuleOrderedCover___nonzero__(self)
    def __bool__(self): return _pypfe.RuleOrderedCover___bool__(self)
    def __len__(self): return _pypfe.RuleOrderedCover___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.RuleOrderedCover___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.RuleOrderedCover___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.RuleOrderedCover_has_key(self, *args)
    def keys(self): return _pypfe.RuleOrderedCover_keys(self)
    def values(self): return _pypfe.RuleOrderedCover_values(self)
    def items(self): return _pypfe.RuleOrderedCover_items(self)
    def __contains__(self, *args): return _pypfe.RuleOrderedCover___contains__(self, *args)
    def key_iterator(self): return _pypfe.RuleOrderedCover_key_iterator(self)
    def value_iterator(self): return _pypfe.RuleOrderedCover_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.RuleOrderedCover___setitem__(self, *args)
    def asdict(self): return _pypfe.RuleOrderedCover_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_RuleOrderedCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.RuleOrderedCover_empty(self)
    def size(self): return _pypfe.RuleOrderedCover_size(self)
    def clear(self): return _pypfe.RuleOrderedCover_clear(self)
    def swap(self, *args): return _pypfe.RuleOrderedCover_swap(self, *args)
    def get_allocator(self): return _pypfe.RuleOrderedCover_get_allocator(self)
    def begin(self): return _pypfe.RuleOrderedCover_begin(self)
    def end(self): return _pypfe.RuleOrderedCover_end(self)
    def rbegin(self): return _pypfe.RuleOrderedCover_rbegin(self)
    def rend(self): return _pypfe.RuleOrderedCover_rend(self)
    def count(self, *args): return _pypfe.RuleOrderedCover_count(self, *args)
    def erase(self, *args): return _pypfe.RuleOrderedCover_erase(self, *args)
    def find(self, *args): return _pypfe.RuleOrderedCover_find(self, *args)
    def lower_bound(self, *args): return _pypfe.RuleOrderedCover_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.RuleOrderedCover_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_RuleOrderedCover
    __del__ = lambda self : None;
RuleOrderedCover_swigregister = _pypfe.RuleOrderedCover_swigregister
RuleOrderedCover_swigregister(RuleOrderedCover)

class RuleBitsetCover(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuleBitsetCover, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RuleBitsetCover, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.RuleBitsetCover_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.RuleBitsetCover___nonzero__(self)
    def __bool__(self): return _pypfe.RuleBitsetCover___bool__(self)
    def __len__(self): return _pypfe.RuleBitsetCover___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.RuleBitsetCover___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.RuleBitsetCover___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.RuleBitsetCover_has_key(self, *args)
    def keys(self): return _pypfe.RuleBitsetCover_keys(self)
    def values(self): return _pypfe.RuleBitsetCover_values(self)
    def items(self): return _pypfe.RuleBitsetCover_items(self)
    def __contains__(self, *args): return _pypfe.RuleBitsetCover___contains__(self, *args)
    def key_iterator(self): return _pypfe.RuleBitsetCover_key_iterator(self)
    def value_iterator(self): return _pypfe.RuleBitsetCover_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.RuleBitsetCover___setitem__(self, *args)
    def asdict(self): return _pypfe.RuleBitsetCover_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_RuleBitsetCover(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.RuleBitsetCover_empty(self)
    def size(self): return _pypfe.RuleBitsetCover_size(self)
    def clear(self): return _pypfe.RuleBitsetCover_clear(self)
    def swap(self, *args): return _pypfe.RuleBitsetCover_swap(self, *args)
    def get_allocator(self): return _pypfe.RuleBitsetCover_get_allocator(self)
    def begin(self): return _pypfe.RuleBitsetCover_begin(self)
    def end(self): return _pypfe.RuleBitsetCover_end(self)
    def rbegin(self): return _pypfe.RuleBitsetCover_rbegin(self)
    def rend(self): return _pypfe.RuleBitsetCover_rend(self)
    def count(self, *args): return _pypfe.RuleBitsetCover_count(self, *args)
    def erase(self, *args): return _pypfe.RuleBitsetCover_erase(self, *args)
    def find(self, *args): return _pypfe.RuleBitsetCover_find(self, *args)
    def lower_bound(self, *args): return _pypfe.RuleBitsetCover_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.RuleBitsetCover_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_RuleBitsetCover
    __del__ = lambda self : None;
RuleBitsetCover_swigregister = _pypfe.RuleBitsetCover_swigregister
RuleBitsetCover_swigregister(RuleBitsetCover)

class RuleCount(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuleCount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RuleCount, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.RuleCount_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.RuleCount___nonzero__(self)
    def __bool__(self): return _pypfe.RuleCount___bool__(self)
    def __len__(self): return _pypfe.RuleCount___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pypfe.RuleCount___getitem__(self, *args)
    def __delitem__(self, *args): return _pypfe.RuleCount___delitem__(self, *args)
    def has_key(self, *args): return _pypfe.RuleCount_has_key(self, *args)
    def keys(self): return _pypfe.RuleCount_keys(self)
    def values(self): return _pypfe.RuleCount_values(self)
    def items(self): return _pypfe.RuleCount_items(self)
    def __contains__(self, *args): return _pypfe.RuleCount___contains__(self, *args)
    def key_iterator(self): return _pypfe.RuleCount_key_iterator(self)
    def value_iterator(self): return _pypfe.RuleCount_value_iterator(self)
    def __setitem__(self, *args): return _pypfe.RuleCount___setitem__(self, *args)
    def asdict(self): return _pypfe.RuleCount_asdict(self)
    def __init__(self, *args): 
        this = _pypfe.new_RuleCount(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pypfe.RuleCount_empty(self)
    def size(self): return _pypfe.RuleCount_size(self)
    def clear(self): return _pypfe.RuleCount_clear(self)
    def swap(self, *args): return _pypfe.RuleCount_swap(self, *args)
    def get_allocator(self): return _pypfe.RuleCount_get_allocator(self)
    def begin(self): return _pypfe.RuleCount_begin(self)
    def end(self): return _pypfe.RuleCount_end(self)
    def rbegin(self): return _pypfe.RuleCount_rbegin(self)
    def rend(self): return _pypfe.RuleCount_rend(self)
    def count(self, *args): return _pypfe.RuleCount_count(self, *args)
    def erase(self, *args): return _pypfe.RuleCount_erase(self, *args)
    def find(self, *args): return _pypfe.RuleCount_find(self, *args)
    def lower_bound(self, *args): return _pypfe.RuleCount_lower_bound(self, *args)
    def upper_bound(self, *args): return _pypfe.RuleCount_upper_bound(self, *args)
    __swig_destroy__ = _pypfe.delete_RuleCount
    __del__ = lambda self : None;
RuleCount_swigregister = _pypfe.RuleCount_swigregister
RuleCount_swigregister(RuleCount)

class OrderedCoverVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderedCoverVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrderedCoverVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.OrderedCoverVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.OrderedCoverVector___nonzero__(self)
    def __bool__(self): return _pypfe.OrderedCoverVector___bool__(self)
    def __len__(self): return _pypfe.OrderedCoverVector___len__(self)
    def pop(self): return _pypfe.OrderedCoverVector_pop(self)
    def __getslice__(self, *args): return _pypfe.OrderedCoverVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.OrderedCoverVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.OrderedCoverVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.OrderedCoverVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.OrderedCoverVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.OrderedCoverVector___setitem__(self, *args)
    def append(self, *args): return _pypfe.OrderedCoverVector_append(self, *args)
    def empty(self): return _pypfe.OrderedCoverVector_empty(self)
    def size(self): return _pypfe.OrderedCoverVector_size(self)
    def clear(self): return _pypfe.OrderedCoverVector_clear(self)
    def swap(self, *args): return _pypfe.OrderedCoverVector_swap(self, *args)
    def get_allocator(self): return _pypfe.OrderedCoverVector_get_allocator(self)
    def begin(self): return _pypfe.OrderedCoverVector_begin(self)
    def end(self): return _pypfe.OrderedCoverVector_end(self)
    def rbegin(self): return _pypfe.OrderedCoverVector_rbegin(self)
    def rend(self): return _pypfe.OrderedCoverVector_rend(self)
    def pop_back(self): return _pypfe.OrderedCoverVector_pop_back(self)
    def erase(self, *args): return _pypfe.OrderedCoverVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_OrderedCoverVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.OrderedCoverVector_push_back(self, *args)
    def front(self): return _pypfe.OrderedCoverVector_front(self)
    def back(self): return _pypfe.OrderedCoverVector_back(self)
    def assign(self, *args): return _pypfe.OrderedCoverVector_assign(self, *args)
    def resize(self, *args): return _pypfe.OrderedCoverVector_resize(self, *args)
    def insert(self, *args): return _pypfe.OrderedCoverVector_insert(self, *args)
    def reserve(self, *args): return _pypfe.OrderedCoverVector_reserve(self, *args)
    def capacity(self): return _pypfe.OrderedCoverVector_capacity(self)
    __swig_destroy__ = _pypfe.delete_OrderedCoverVector
    __del__ = lambda self : None;
OrderedCoverVector_swigregister = _pypfe.OrderedCoverVector_swigregister
OrderedCoverVector_swigregister(OrderedCoverVector)

class BitsetCoverVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitsetCoverVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitsetCoverVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pypfe.BitsetCoverVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pypfe.BitsetCoverVector___nonzero__(self)
    def __bool__(self): return _pypfe.BitsetCoverVector___bool__(self)
    def __len__(self): return _pypfe.BitsetCoverVector___len__(self)
    def pop(self): return _pypfe.BitsetCoverVector_pop(self)
    def __getslice__(self, *args): return _pypfe.BitsetCoverVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pypfe.BitsetCoverVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pypfe.BitsetCoverVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pypfe.BitsetCoverVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pypfe.BitsetCoverVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pypfe.BitsetCoverVector___setitem__(self, *args)
    def append(self, *args): return _pypfe.BitsetCoverVector_append(self, *args)
    def empty(self): return _pypfe.BitsetCoverVector_empty(self)
    def size(self): return _pypfe.BitsetCoverVector_size(self)
    def clear(self): return _pypfe.BitsetCoverVector_clear(self)
    def swap(self, *args): return _pypfe.BitsetCoverVector_swap(self, *args)
    def get_allocator(self): return _pypfe.BitsetCoverVector_get_allocator(self)
    def begin(self): return _pypfe.BitsetCoverVector_begin(self)
    def end(self): return _pypfe.BitsetCoverVector_end(self)
    def rbegin(self): return _pypfe.BitsetCoverVector_rbegin(self)
    def rend(self): return _pypfe.BitsetCoverVector_rend(self)
    def pop_back(self): return _pypfe.BitsetCoverVector_pop_back(self)
    def erase(self, *args): return _pypfe.BitsetCoverVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pypfe.new_BitsetCoverVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pypfe.BitsetCoverVector_push_back(self, *args)
    def front(self): return _pypfe.BitsetCoverVector_front(self)
    def back(self): return _pypfe.BitsetCoverVector_back(self)
    def assign(self, *args): return _pypfe.BitsetCoverVector_assign(self, *args)
    def resize(self, *args): return _pypfe.BitsetCoverVector_resize(self, *args)
    def insert(self, *args): return _pypfe.BitsetCoverVector_insert(self, *args)
    def reserve(self, *args): return _pypfe.BitsetCoverVector_reserve(self, *args)
    def capacity(self): return _pypfe.BitsetCoverVector_capacity(self)
    __swig_destroy__ = _pypfe.delete_BitsetCoverVector
    __del__ = lambda self : None;
BitsetCoverVector_swigregister = _pypfe.BitsetCoverVector_swigregister
BitsetCoverVector_swigregister(BitsetCoverVector)

# This file is compatible with both classic and new-style classes.


